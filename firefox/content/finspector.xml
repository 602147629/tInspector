<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml">

	<binding id="flash">
		<implementation>
			<constructor>
        <![CDATA[
var current = this;
var parent = current.parentNode;
if(current.overrideCTV){
	return;
}
current.overrideCTV = true;

//From Jesse's XPCNativeWrapper: http://mavra.perilith.com/~luser/content/native.js
function nativeMethod(untrustedObject, methodName)
{
  // happier stack traces and faster multiple calls
  var fun = Components.lookupMethod(untrustedObject, methodName);
  
  return function()
  {
    return fun.apply(untrustedObject, arguments);
  }
}

function log(msg){
//	var consoleService = Components.classes["@mozilla.org/consoleservice;1"]
//			.getService(Components.interfaces.nsIConsoleService);
//	consoleService.logStringMessage(msg);
}


function getElementPosition(element)
{
    // Restrict rectangle coordinates by the boundaries of a window's client area
    function intersectRect(rect, wnd)
    {
      // Cannot use wnd.innerWidth/Height because they won't account for scrollbars
      let doc = wnd.document;
      let wndWidth = doc.documentElement.clientWidth;
      let wndHeight = doc.documentElement.clientHeight;
      if (doc.compatMode == "BackCompat") // clientHeight will be bogus in quirks mode
        wndHeight = Math.max(doc.documentElement.offsetHeight, doc.body.offsetHeight) - wnd.scrollMaxY - 1;
  
      rect.left = Math.max(rect.left, 0);
      rect.top = Math.max(rect.top, 0);
      rect.right = Math.min(rect.right, wndWidth);
      rect.bottom = Math.min(rect.bottom, wndHeight);
    }

    let rect = element.getBoundingClientRect();
    let wnd = element.ownerDocument.defaultView;

    let style = wnd.getComputedStyle(element, null);
    let offsets = [
      parseFloat(style.borderLeftWidth) + parseFloat(style.paddingLeft),
      parseFloat(style.borderTopWidth) + parseFloat(style.paddingTop),
      parseFloat(style.borderRightWidth) + parseFloat(style.paddingRight),
      parseFloat(style.borderBottomWidth) + parseFloat(style.paddingBottom)
    ];

    rect = {left: rect.left + offsets[0], top: rect.top + offsets[1],
            right: rect.right - offsets[2], bottom: rect.bottom - offsets[3]};
    while (true)
    {
      intersectRect(rect, wnd);

      if (!wnd.frameElement)
        break;

      // Recalculate coordinates to be relative to frame's parent window
      let frameElement = wnd.frameElement;
      wnd = frameElement.ownerDocument.defaultView;

      let frameRect = frameElement.getBoundingClientRect();
      let frameStyle = wnd.getComputedStyle(frameElement, null);
      let relLeft = frameRect.left + parseFloat(frameStyle.borderLeftWidth) + parseFloat(frameStyle.paddingLeft);
      let relTop = frameRect.top + parseFloat(frameStyle.borderTopWidth) + parseFloat(frameStyle.paddingTop);

      rect.left += relLeft;
      rect.right += relLeft;
      rect.top += relTop;
      rect.bottom += relTop;
    }

    return rect;
}

//创建一个替换swf的place holder
function flashblockCreatePlaceholder(isStandalone) {
	// Create placeholder
	var flashblockCreateElement = nativeMethod(document, "createElementNS");
	var placeholder = flashblockCreateElement("http://www.w3.org/1999/xhtml", "div");
	placeholder.isStandalone = isStandalone;
	return placeholder;
}

//把swf替换成place holder
function flashblockShowPlaceholder() {
	// Just in case the object has been moved away from under our feet during
	// the timeout, re-assign the parent node. See bug 13680
	// parent = current.parentNode;
	var newParent = current.parentNode;
	parent = newParent ? newParent : parent;

	// Fix for Flashblock Bug 22168 (Node was not found" code: "8").
	// if the LSB is 1, it means the nodes are unrelated (e.g. different window).
	if (current.compareDocumentPosition(parent)&1)
		return;

	parent.insertBefore(placeholder, current);
	if(placeholder.isStandalone) {
		placeholder.flashblock = "frame";
		if ("StopPlay" in current)
			current.StopPlay();
		if ("LoadMovie" in current)
			current.LoadMovie(0, "");
		current.prevWidth = current.width;
		current.prevHeight = current.height;
		current.width = current.height = 0;
	} else {
		placeholder.flashblock = "normal";
		parent.removeChild(current); 
	}
}

//显示swf
function flashblockShowFlash() {
	event = document.createEvent("UIEvents");
	if(event) {
		event.initEvent("flashblockLoadSwf", true, true);
		placeholder.dispatchEvent(event);
	}

	var parent = placeholder.parentNode;
	if(placeholder.flashblock == "frame") {
		current.height = current.prevHeight;
		current.width = current.prevWidth;
		current.src = placeholder.title;
		if ("LoadMovie" in current)
			current.LoadMovie(0, current.src);
	} else {
		parent.insertBefore(current, placeholder);
		if (placeholder.hasAttribute("srcAttribute")) {
			current.setAttribute("src", placeholder.getAttribute("srcAttribute"));
		}
		if (placeholder.hasAttribute("movieAttribute")) {
			current.setAttribute("movie", placeholder.getAttribute("movieAttribute"));
		}
		if (placeholder.hasAttribute("dataAttribute")) {
			current.setAttribute("data", placeholder.getAttribute("dataAttribute"));
		}
		if (placeholder.movieParam) {
			var mparam = placeholder.movieParam;
			mparam[0].value = mparam[1];
		}
		if (placeholder.srcParam) {
			var mparam = placeholder.srcParam;
			mparam[0].value = mparam[1];
		}
		if (placeholder.sourceParam) {
			var mparam = placeholder.sourceParam;
			mparam[0].value = mparam[1];
		}
	}
	parent.removeChild(placeholder);
}

//设置flashblock的title
function flashblockSetTitle(current, placeholder, isStandalone) {
	// non-null "about:blank" value to prevent OS/2 crashing
	var fakeURI = "about:blank";
	if (isStandalone) {
		placeholder.title = current.src;
		current.src = fakeURI;
	}
	else if (current.hasAttribute("src") ||
			(current.hasAttribute("data") && !/application\/x-silverlight/.test(current.getAttribute("data"))) ||
			current.hasAttribute("movie") ) {
		var srcURI = current.getAttribute("src") ||
			current.getAttribute("movie") ||
			current.getAttribute("data") ;
		placeholder.title = srcURI;
		if (current.hasAttribute("src")) {
			placeholder.setAttribute("srcAttribute", current.getAttribute("src"));
			current.setAttribute("src", fakeURI);
		}
		if (current.hasAttribute("data")) {
			placeholder.setAttribute("dataAttribute", current.getAttribute("data"));
			current.setAttribute("data", fakeURI);
		}
		if (current.hasAttribute("movie")) {
			placeholder.setAttribute("movieAttribute", current.getAttribute("movie"));
			current.setAttribute("movie", fakeURI);
		}
	}
	else {
		var params = current.getElementsByTagName("param");
		for (var ii = 0; ii < params.length; ii++) {
			if (params[ii].getAttribute("name") == "movie" &&
				params[ii].hasAttribute("value")) {
				placeholder.title = params[ii].value;
				placeholder.movieParam = [ params[ii], placeholder.title ];
				params[ii].value = fakeURI;
				break;
			}
			if (params[ii].getAttribute("name") == "src" &&
				params[ii].hasAttribute("value")) {
				placeholder.title = params[ii].value;
				placeholder.srcParam = [ params[ii], placeholder.title ];
				params[ii].value = fakeURI;
				break;
			}
			if (params[ii].getAttribute("name") == "source" &&
				params[ii].hasAttribute("value")) {
				placeholder.title = params[ii].value;
				placeholder.sourceParam = [ params[ii], placeholder.title ];
				params[ii].value = fakeURI;
				break;
			}
		}
	}
}
document.QueryInterface(Components.interfaces.nsIDOMDocument);
var createElement = nativeMethod(document, "createElementNS");

//新建一个按钮,附在swf元素上
function createTriggerBtn(isStandalone) {
	// Create btn
	var btn = createElement("http://www.w3.org/1999/xhtml", "div");
	btn.isStandalone = isStandalone;
	
	//设置背景图
	var image = "url(chrome://finspector/skin/finspector_16.png)";
	btn.style.setProperty("background", image, "important");
	
	//设置位置,长宽
	btn.style.setProperty("min-width", "32px", "important");
	btn.style.setProperty("min-height", "32px", "important");
	
    let objRect = getElementPosition(current);

    let left = objRect.right - btn.offsetWidth;
    let top = objRect.top - btn.offsetHeight;
    if (top < 0)
    {
      top = objRect.bottom;
    }

    if (btn.style.left != left + "px")
      btn.style.setProperty("left", left + "px", "important");
    if (btn.style.top != top + "px")
      btn.style.setProperty("top", top + "px", "important");
	
	parent.insertBefore(btn, current);
}

var swf = current;
if (swf.id == "tInspectorConsoleMonitor") {
	return;
}else if(!swf.id){
	swf.id = "fInspectorSwf_" + (new Date()).getTime();
}
if (!swf.src
		|| swf.src != 'chrome://finspector/content/tInspectorConsoleMonitor.swf') {
	if (swf.tagName.toUpperCase() == 'OBJECT') {
		// 判断是不是有<param name="allowScriptAccess" value="always" /> 和
		// <param name="allowFullScreen" value="true" />
		
		var childs = swf.childNodes;
		var needAppendScriptAccess = true;
		var needAppendFullScreen = true;
		for ( var i = 0; i < childs.length; i++) {
			var param = childs[i];
			if (param.name.toUpperCase() == "ALLOWSCRIPTACCESS") {
				swf.appendChild(param);
				param.value = "always";
				needAppendScriptAccess = false;
			}
			if (param.name.toUpperCase() == "ALLOWFULLSCREEN") {
				param.value = "true";
				needAppendFullScreen = false;
			}
		}

		if (needAppendFullScreen) {
			param = createElement("http://www.w3.org/1999/xhtml", "param");
			param.name = "allowFullScreen";
			param.value = "true";
			swf.appendChild(param);
		}
		if (needAppendScriptAccess) {
			param = createElement("http://www.w3.org/1999/xhtml", "param");
			param.name = "allowScriptAccess";
			param.value = "always";
			swf.appendChild(param);
		}

	} else if (swf.tagName.toUpperCase() == 'EMBED') {
		swf.setAttribute("allowscriptaccess", "always");
		swf.setAttribute("allowfullscreen", "true");
	}
}

if(current.src && current.src.indexOf('chrome:') >= 0){
}else{

	//创建一个placeholder
	var isStandalone = ("src" in current && current.src == current.ownerDocument.location);
	var placeholder = flashblockCreatePlaceholder(isStandalone);
	
	document.QueryInterface(Components.interfaces.nsIDOMDocument);
	event = document.createEvent("UIEvents");
	if(event) {
		event.initEvent("flashblockCheckLoad", true, true);
		current.dispatchEvent(event);
	}
	
	flashblockSetTitle(current, placeholder, isStandalone);
	
	//延迟设置
	var flashblockSetTimeout = nativeMethod(window, "setTimeout");
//	flashblockSetTimeout(flashblockShowPlaceholder, 0);
	flashblockShowPlaceholder();
	
	//显示swf
	flashblockSetTimeout(flashblockShowFlash, 1000);
}
        ]]>
			</constructor>
		</implementation>
	</binding>
</bindings>
